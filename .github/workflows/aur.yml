name: AUR

# use `--ask 4` in pacman to allow defeault yes in case of conflicts
# https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions


on:
  schedule:
    - cron: '0 0 * * sun'
  workflow_dispatch:
  # push:

env:
  BAT_PAGER: ''
  COLUMNS: '140' # Terminal Width
  FORCE_COLOR : 'true' # Force colors in console output
  CLICOLOR: 1
  CLI_COLOR: 1
  CLICOLOR_FORCE: 'yes'
  CLI_COLOR_FORCE: 'yes'
  force_color_prompt: 'yes'
  color_prompt: 'yes'
  TERM: 'xterm-256color'
  GCC_COLORS: 'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
  LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=01;30:ow=01;34:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
  COLORTERM: 'truecolor'
  COLOR_TERM: 'truecolor'
  CMAKE_COLOR_DIAGNOSTICS: 'true'
  # CFLAGS: '-fdiagnostics-color=always'
  # CCFLAGS: '-fdiagnostics-color=always'
  # CXXFLAGS: '-fdiagnostics-color=always'
  # CPPFLAGS: '-fdiagnostics-color=always'
  VERBOSE: 1
  NODE_OPTIONS: '--max_old_space_size=8192' # increase max allowed memory usage
  REPO: aur-repo

permissions:
  contents: write # For creating releases
  pages: write
  id-token: write
  deployments: write

defaults:
  run:
    shell: bash -l -e -o pipefail {0}

jobs:
  load_balancer:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Set Output packages
          id: set-packages
          run: |
            # Note: jq -c does not work well with `fromJson` as its outtput contains spaces
            #       Python json works well as it removes spaces
            pip3 install json5 # Allows using C-style comments in json
            python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"
            echo "matrix=$(cat packages_aur.json)" >> $GITHUB_OUTPUT


        - name: View Packages
          run: cat packages_aur.json | jq --color-output


        - name: Create Version Env
          id: set-version
          run: |
              version=$(date --utc '+%Y%m%d-%H%M')
              echo "VERSION=${version}" >> $GITHUB_ENV
              echo "Version: ${version}"
              echo "version=${version}" >> $GITHUB_OUTPUT


      outputs:
          matrix: ${{ steps.set-packages.outputs.matrix }}
          version: ${{ steps.set-version.outputs.version }}



  build:
    name: "Build ${{ matrix.name }}"
    needs: load_balancer
    runs-on: ubuntu-latest
    continue-on-error: true
    
    strategy:
        fail-fast: false
        matrix:
          include: ${{ fromJson(needs.load_balancer.outputs.matrix) }}
          # include:
            # - name: "ttf-ms-win10-auto"

    container:
      image: "manjarolinux/build"
      # https://docs.docker.com/engine/reference/commandline/create/
      options: "--privileged --attach STDIN --attach STDOUT --attach STDERR --interactive --tty --cgroupns=host --volume /sys/fs/cgroup:/sys/fs/cgroup"

    steps:
      - uses: actions/checkout@v3
  
      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat aria2

      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: makepkg Config
        run: |
          sed -i 's/COMPRESSZST.*/COMPRESSZST=(zstd -c -z -q --threads=0 -19 -)/g' /etc/makepkg.conf
          sed -i 's/CFLAGS="/CFLAGS="-fdiagnostics-color=always /g' /etc/makepkg.conf
          sed -i 's/--retry 3 --retry-delay 3/--retry 15 --retry-delay 10 --retry-all-errors --retry-connrefused/g' /etc/makepkg.conf
          echo 'PACKAGER="3omar-mostafa <3omar-mostafa@invalid-email.com>"' >> /etc/makepkg.conf
          bat --color always --wrap=never /etc/makepkg.conf -l conf

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel glibc curl wget coreutils asp xterm git sudo yay bat procps-ng socat at-spi2-core downgrade

      - name: Install python2
        run: |
          echo '#!/usr/bin/env bash' > /bin/pacignore
          PACMAN_OPTIONS="--noconfirm --color always --ask 4 --overwrite '*'"
          export DOWNGRADE_FROM_ALA=1
          downgrade 'python2==2.7.18-5' 'python2-setuptools==2:44.1.1-2' --ala-only -- $PACMAN_OPTIONS

      - name: Setup mold linker
        continue-on-error: true
        if: ${{ ! matrix.disable_mold }}
        uses: rui314/setup-mold@v1

      - name: Create Swap file
        if: matrix.need_swap
        run: |
          export SWAPFILE=/__w/swapfile
          dd if=/dev/zero of=$SWAPFILE bs=1M count=10240 status=progress
          chmod 0600 $SWAPFILE
          mkswap -U clear $SWAPFILE
          swapon --verbose $SWAPFILE
          
          swapon --show 
          df -Th
          free -h

      - name: Create non root user
        run: |
            cp -v /etc/skel/.* ~ || true
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            chown -R user ..

      - name: yay configuration
        run: |
          echo "Epoch Version label is not prefered and causes error while uploading because files contains ':'"
          
          yay --answerclean None --builddir $PWD --save
          yay --show --currentconfig

      - name: Install Paru
        run: sudo -E -u user yay -Sy --color always --noconfirm --cleanafter paru-bin

      - name: Install GPG Key
        if: matrix.gpg_key
        run: |
          if [[ -n "${{ matrix.gpg_key_server }}" ]] ;  then
            export args="--keyserver ${{ matrix.gpg_key_server }}"
          fi

          sudo -u user gpg $args --recv-keys "${{ matrix.gpg_key }}"
          gpg $args --recv-keys "${{ matrix.gpg_key }}"
          chown -R user:user ~

      - name: Install GPG Key (From URL)
        if: matrix.gpg_url
        run: |
          wget "${{ matrix.gpg_url }}" -O /tmp/gpg.key && chmod a+r /tmp/gpg.key
          
          sudo -u user gpg --import /tmp/gpg.key
          gpg --import /tmp/gpg.key
          chown -R user:user ~

      - name: Install Arch Linux Dependencies
        if: matrix.archdepends
        run: |
          echo '#!/usr/bin/env bash' > /bin/pacignore
          PACMAN_OPTIONS="--noconfirm --color always --ask 4 --overwrite '*'"
          export DOWNGRADE_FROM_ALA=1
          rm -rfv /usr/share/libalpm/hooks/package-cleanup.hook

          downgrade ${{ matrix.archdepends }} --ala-only -- $PACMAN_OPTIONS

          for package in $(./scripts/split_package_name.py "${{ matrix.archdepends }}"); do
            find /var/cache/pacman/pkg/ -iname "*$package*" -type f -exec mv -v {} . \;
          done

      - name: Install/Build Dependencies of ${{ matrix.name }}
        if: matrix.depends || matrix.checkdepends
        run: |
          cat <<EOF > deps.sh
            sudo -E -u user yay -Sy --color always --noconfirm --needed --builddir . --nocleanafter --useask --ask 4 --overwrite '*' ${{ matrix.depends }} ${{ matrix.checkdepends }}
          EOF
          
          chmod a+x deps.sh
          bat --color always --wrap=never deps.sh
          socat EXEC:'bash -l -e -o pipefail ./deps.sh',pty,setsid,ctty,stderr,rawer,login,echo=0 FD:1

      - name: Build ${{ matrix.name }}
        if: ${{ ! matrix.meta }}
        run: |
          export SCRIPTS_DIR=`pwd`/scripts

          cat <<EOF > build.sh
          #!/bin/bash
          
          if [[ -n "${{ matrix.official }}" ]] ;  then

            git clone -q https://github.com/archlinux/svntogit-packages  --single-branch --depth 1 --branch "packages/${{ matrix.name }}" \
            || \
            git clone -q https://github.com/archlinux/svntogit-community --single-branch --depth 1 --branch "packages/${{ matrix.name }}"

            cd svntogit-*/trunk

            sudo -E pacman -Rcns --noconfirm --color always --ask 4 "${{ matrix.name }}" || true
          
          elif [[ -n "${{ matrix.local }}" ]] ; then
            cp -a "./packages/${{ matrix.name }}" .
            cd "${{ matrix.name }}"
          
          else
            git clone -q "https://aur.archlinux.org/${{ matrix.name }}.git"
            cd "${{ matrix.name }}"
          fi

          if [[ -n "${{ matrix.checkout }}" ]] ;  then
            git checkout "${{ matrix.checkout }}"
          fi
          
          find ../.. -ignore_readdir_race -type d -name .git -exec rm -rf {} \; || true
          
          if [[ -n "${{ matrix.apply_script_file }}" ]] ;  then
            echo "Applying Patch from ${{ matrix.apply_script_file }} file"
            
            chmod a+x "${SCRIPTS_DIR}/${{ matrix.apply_script_file }}"
            "${SCRIPTS_DIR}/${{ matrix.apply_script_file }}"
          fi

          if [[ -n "${{ matrix.apply_cmd }}" ]] ;  then
            echo "Applying Patch from command:"
            echo "${{ matrix.apply_cmd }}"
            
            ${{ matrix.apply_cmd }}
          fi
          
          if [[ -n "${{ matrix.group }}" ]] ;  then
            sed -i "s^\^pkgname=^groups=(${{ matrix.group }})\npkgname=^g" PKGBUILD
          fi
          
          bat --color always --wrap=never PKGBUILD

          paru -Ui --noconfirm --color always --nocleanafter --noredownload --useask --ask 4 --overwrite '*' --builddir . ${{ matrix.build_flags }}
          
          EOF
          
          chown -R user:user /github
          chown -R user:user $HOME

          chmod a+x build.sh
          bat --color always --wrap=never build.sh
          socat EXEC:'sudo -E -u user bash -l -e -o pipefail ./build.sh',pty,setsid,ctty,stderr,rawer,login,echo=0 FD:1

      - name: Conflict Dependencies of ${{ matrix.name }}
        if: matrix.conflictdepends
        run: |
          cat <<EOF > deps.sh
            function RED()    { echo -e "\e[1m\e[31m\${1}\e[0m"; }
            function GREEN()  { echo -e "\e[1m\e[32m\${1}\e[0m"; }
            function YELLOW() { echo -e "\e[1m\e[33m\${1}\e[0m"; }

            read -a packages <<< "${{ matrix.conflictdepends }}"
            for package in "\${packages[@]}"; do
              YELLOW "################################################################################"
              if [[ -n "\$old_package" ]]; then
                RED "****************************** Removing \$old_package ******************************"
                pacman -R --color always --noconfirm --ask 4 "\$old_package" || true
                RED "********************************************************************************"
              fi
              GREEN "==================================== Installing \$package ===================================="
              sudo -E -u user paru -Sy --color always --noconfirm --needed --builddir . --nocleanafter --useask --ask 4 --overwrite '*' "\$package" || true
              export old_package="\$package"
              GREEN "================================================================================"
            done
          EOF
          
          chmod a+x deps.sh
          bat --color always --wrap=never deps.sh
          socat EXEC:'bash -l -e -o pipefail ./deps.sh',pty,setsid,ctty,stderr,rawer,login,echo=0 FD:1

      - name: Post Dependencies of ${{ matrix.name }}
        if: matrix.postdepends
        run: |
          cat <<EOF > deps.sh
            sudo -E -u user yay -Sy --color always --noconfirm --needed --builddir . --nocleanafter --useask --ask 4 --overwrite '*' ${{ matrix.postdepends }}
          EOF
          
          chmod a+x deps.sh
          bat --color always --wrap=never deps.sh
          socat EXEC:'bash -l -e -o pipefail ./deps.sh',pty,setsid,ctty,stderr,rawer,login,echo=0 FD:1

      - name: "Fix File Names [Replace : with - ]"
        run: find . -type f -name '*:*' -execdir bash -c 'mv "$1" "${1//:/-}"' bash {} \;

      - name: "Copy all packages to root folder"
        run: find . -iname '*.pkg.tar.zst' -exec cp {} . \;

      - run: ls -lRh --color=always
        if: always()

      - name: Upload Package
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "${{ matrix.name }}"
          path: "*.pkg.tar.zst"
          retention-days: 3
          if-no-files-found: error


  deploy:
    needs: [load_balancer, build]
    runs-on: ubuntu-latest
    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"
    steps:
      - uses: actions/checkout@v3
      
      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat aria2

      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel curl wget tree zip github-cli asp p7zip manjaro-tools-base manjaro-tools-pkg python-lxml python-beautifulsoup4

      - name: Create Version Env
        run: |
            version=${{ needs.load_balancer.outputs.version }}
            echo "VERSION=${version}" >> $GITHUB_ENV

            echo "Version: ${version}"

      - name: Download All Packages
        uses: actions/download-artifact@v3
        with:
          path: "${{ env.REPO }}"

      - name: "List packages tree"
        run: tree "./${REPO}" --du -h

      - name: "Move all packages to root folder"
        run: find . -iname '*.pkg.tar.zst' -exec mv -v {} "./${REPO}" \;

      - name: "Delete Empty Directories"
        continue-on-error: true
        run: find . -ignore_readdir_race -type d -exec rmdir -v {} \; || true

      - name: "Delete Python 2 Packages"
        run: find . -iname 'python2*' -exec rm -rfv {} \; || true

      - name: Generate database files
        run: |
          cd "${REPO}"
          repo-add "${REPO}.db.tar.gz" *.pkg.tar.*

      - name: Generate Checksum for packages
        run: |
          cd "${REPO}"
          echo "## SHA256 Checksum" > /tmp/checksums.sha256
          echo "<details><summary>Click to expand</summary>" >> /tmp/checksums.sha256
          echo -e "\n\n" >> /tmp/checksums.sha256
          echo "| SHA256 | Filename |" >> /tmp/checksums.sha256
          echo "| ------ | -------- |" >> /tmp/checksums.sha256
          for file in *; do
            echo "| `sha256sum $file | cut -f1 -d' '` | $file |" >> /tmp/checksums.sha256
          done
          echo -e "\n\n</details>" >> /tmp/checksums.sha256
          cat /tmp/checksums.sha256

      - name: Release Packages Files
        shell: bash -l {0}
        run: |
          cd ./${{ env.REPO }}

          echo ${{ github.token }} | gh auth login --with-token
          tag_name="${{ env.VERSION }}"

          gh release create "$tag_name" --title "Release v${{ env.VERSION }}" --repo ${{ github.repository }} --notes-file /tmp/checksums.sha256
          status_code=$?

          if [[ $status_code != 0 ]] ; then
            echo -e "\e[1m\e[31m ============== Release '$tag_name' already exists ============== \e[0m"
            
            assets_count=$(gh release view "$tag_name" --repo ${{ github.repository }} --json assets --jq '.[]|length')
            files_count=$(ls -1 | wc -l)

            echo "[DEBUG] assets_count = $assets_count    files_count = $files_count"
            
            if [[ $assets_count == $files_count ]] ; then
              exit 0
            fi

            gh release edit "$tag_name" --repo ${{ github.repository }} --notes-file /tmp/checksums.sha256
          fi

          for package in * ; do
            for attempt in {1..15} ; do
              if [[ "$attempt" != 1 ]] ; then
                echo -e "\e[1m\e[33m Attempt#$attempt Trying to upload '$package' \e[0m"
              fi

              gh release upload "$tag_name" --repo ${{ github.repository }} --clobber "$package"
              status_code=$?

              rate_limit_json=$(gh api /rate_limit --jq '.resources.core')
              remaining_api=$(echo "$rate_limit_json" | jq -r '.remaining')

              if [[ $status_code == 0 ]] ; then
                echo -e "\e[1m\e[32m Uploaded '$package' \e[0m \e[1m\e[33m [Remaining API $remaining_api] \e[0m"
                break
              else
                echo -e "\e[1m\e[31m Failed to upload '$package' \e[0m \e[1m\e[33m [Remaining API $remaining_api] \e[0m"
                if [[ "$attempt" == 10 ]] ; then
                  echo " [DEBUG] $rate_limit_json"
                  reset_time=$(echo "$rate_limit_json" | jq -r '.reset')
                  current_time=$(date '+%s')
                  time_to_reset=$(( $reset_time - $current_time ))

                  echo " [DEBUG] Will sleep until ratelimit reset, i.e. ${time_to_reset} sec. ($(( $time_to_reset / 60 )) min.)"
                  sleep $time_to_reset
                fi

                if [[ "$attempt" == 10 ]] ; then
                  echo -e "\e[1m\e[31m ============== Failed to Release '$package' ============== \e[0m"
                fi
              fi
              
              sleep $(( 2 * $attempt ))
            done
            sleep 1
          done

      - name: Generate index.html
        run: |
          export SCRIPTS_DIR="$PWD/scripts/apindex"
          $SCRIPTS_DIR/build.sh
          cd "${REPO}"
          apindex . "AUR Repository v${VERSION}"

      - name: Add deploy redirects
        run: |
          cd "${REPO}" && mkdir deploy && cd deploy
          cp -v ../index.html .
          echo "/:file https://github.com/3omar-mostafa/manjaro/releases/download/${VERSION}/:file 301" > _redirects

      # There was an issue while deploying non writable files
      - run: chmod -R a+rw .

      - run: ls -lRh --color=always
        if: always()

      - run: du -sh ${{ env.REPO }} ; du -sh ${{ env.REPO }}/* | sort -rh
        continue-on-error: true
        if: always()

      - name: Prepare Cloudflare deploy
        run: |
          pacman -Sy --noconfirm --color always --needed nodejs-lts-gallium npm
          npm install -g wrangler@2

      - name: Publish to Cloudflare Pages
        id: cloudflare-pages-deploy
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "${{ env.REPO }}"
          directory: "${{ env.REPO }}/deploy"
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Repo details
        run: |
          echo "=========================================================================="
          echo "[${REPO}]"
          echo "SigLevel = Never"
          echo "Server = ${{ steps.cloudflare-pages-deploy.outputs.url }}"
          echo "=========================================================================="

    outputs:
      deploy_url: ${{ steps.cloudflare-pages-deploy.outputs.url }}

  test:
    runs-on: ubuntu-latest
    needs: [deploy]
    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"
    
    steps:
      - uses: actions/checkout@v3

      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat aria2

      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel python-json5 asp

      - name: Config Repo
        run: |
          sed -i "s^{{PM_REPO_PATCH_URL}}^${{ needs.deploy.outputs.deploy_url }}^g" ./scripts/pacman_repo.patch
          patch -Np1 -i ./scripts/pacman_repo.patch /etc/pacman.conf
          pacman -Syy --noconfirm --color always
      
      - name: Intall Packages
        shell: bash -l {0}
        run: |
          python3 ./scripts/prepare_test_packages.py

          while read -r package; do
              echo -e "\e[1m\e[32m =================================== Installing '$package' =================================== \e[0m"
              pacman -S --noconfirm --color always --ask 4 --overwrite '*' $package 

              if [[ $? != 0 ]] ; then
                echo -e "\e[1m\e[31m ============================== Failed to install '$package' ============================== \e[0m"
                echo "$package" >> failed_to_install.txt
              else
                pacman -R --color always --noconfirm --ask 4 "$package" >/dev/null
              fi

              echo -e "\e[1m\e[33m =========================================================================================== \e[0m"
          done < packages_aur.txt


      - name: List packages failed to install
        run: cat failed_to_install.txt || echo "All packages installed successfully"

