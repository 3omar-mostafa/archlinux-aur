name: AUR

# use `--ask 4` in pacman to allow defeault yes in case of conflicts
# https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions


on:
  schedule:
    - cron: '0 0 * * mon' # Runs at 00:00 UTC on Monday.
  push:
  workflow_dispatch:

env:
  FORCE_COLOR : 'true' # Force colors in console output
  CLICOLOR: 1
  CLICOLOR_FORCE: 'yes'
  force_color_prompt: 'yes'
  color_prompt: 'yes'
  TERM: 'xterm-256color'
  GCC_COLORS: 'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
  COLORTERM: 'truecolor'
  VERBOSEL: 1
  NODE_OPTIONS: '--max_old_space_size=8192' # increase max allowed memory usage
  REPO: aur-repo


defaults:
  run:
    shell: bash

jobs:
  load_balancer:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Set Output packages
          id: set-packages
          run: |
            # Note: jq -c does not work well with `fromJson` as its outtput contains spaces
            #       Python json works well as it removes spaces
            pip3 install json5 # Allows using C-style comments in json
            python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"
            echo "::set-output name=matrix::$(cat packages_aur.json)"


        - name: View Packages
          run: cat packages_aur.json | jq --color-output

      outputs:
          matrix: ${{ steps.set-packages.outputs.matrix }}




  build:
    name: "Build ${{ matrix.name }}"
    needs: load_balancer
    runs-on: ubuntu-latest
    
    strategy:
        fail-fast: false
        matrix:
          include: ${{ fromJson(needs.load_balancer.outputs.matrix) }}
          # include:
            # - name: "networkmanager"
            #   checkdepends: "python-dbus"
            #   official: true
            #   apply_script_file: "networkmanager/networkmanager.sh"
            #   build_flags: "--nocheck"

    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"

    steps:
      - uses: actions/checkout@v3
  
      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat

      - name: Pacman Config
        run: |
          sed -i 's/#Color/Color/g' /etc/pacman.conf
          sed -i 's/HoldPkg/#HoldPkg/g' /etc/pacman.conf
          sed -i 's/IgnorePkg/#IgnorePkg/g' /etc/pacman.conf
          bat --color always --pager=never /etc/pacman.conf

      - name: makepkg Config
        run: |
          sed -i 's/COMPRESSZST.*/COMPRESSZST=(zstd -c -z -q --threads=0 -19 -)/g' /etc/makepkg.conf
          echo 'PACKAGER="3omar-mostafa <3omar-mostafa@invalid-email.com>"' >> /etc/makepkg.conf
          bat --color always --pager=never /etc/makepkg.conf

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always base-devel glibc curl wget coreutils xterm git sudo yay asp bat socat colorgcc procps-ng

      - name: Create Swap file
        run: |
          export SWAPFILE=/__w/swapfile
          dd if=/dev/zero of=$SWAPFILE bs=1M count=10240 status=progress
          chmod 0600 $SWAPFILE
          mkswap -U clear $SWAPFILE
          swapon --verbose $SWAPFILE
          
          swapon --show 
          df -Th
          free -h

      - name: Create non root user
        run: |
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            chown -R user ..

      - name: yay configuration
        run: |
          echo "Epoch Version label is not prefered and causes error while uploading because files contains ':'"
          
          yay --answerclean None --builddir $PWD --save
          yay --show --currentconfig

      - name: Install Paru
        run: sudo -u user yay -Sy --color always --noconfirm --builddir . --cleanafter paru-bin

      - name: Install GPG Key
        if: matrix.gpg_key
        run: |
          sudo -E -u user gpg --recv-keys ${{ matrix.gpg_key }}
          gpg --recv-keys ${{ matrix.gpg_key }}

      - name: Install GPG Key
        if: matrix.gpg_url
        run: |
          wget "${{ matrix.gpg_url }}" -O /tmp/gpg.key && chmod a+r /tmp/gpg.key
          
          sudo -E -u user gpg --import /tmp/gpg.key
          gpg --import /tmp/gpg.key

      - name: Prepare Install/Build Dependencies
        if: matrix.depends || matrix.checkdepends
        run: |
          cat <<EOF > deps.sh
            sudo -u user yay -Sy --color always --noconfirm --needed --builddir . --nocleanafter --ask 4 ${{ matrix.depends }} ${{ matrix.checkdepends }} \
            || \
            ( echo "[Error] Can not install dependencies" && exit 1 )
          EOF
          
          chmod a+x deps.sh
          bat --color always --pager=never deps.sh
        
      - name: Install/Build Dependencies of ${{ matrix.name }}
        if: matrix.depends || matrix.checkdepends
        uses: Wandalen/wretry.action@v1.0.25
        with:
          attempt_limit: 3
          attempt_delay: "10000" # 10 seconds
          command: ./deps.sh

#       - name: Build ${{ matrix.name }}
#         uses: Wandalen/wretry.action@v1.0.25
#         with:
#           attempt_limit: 3
#           attempt_delay: "10000" # 10 seconds
#           command: sudo -u user yay -Sy  --color always --noconfirm --needed --builddir . --nocleanafter --aur --ask 4 ${{ matrix.name }}

#       - name: Patch makepkg
#         run: |
#           patch_path=$PWD/scripts/makepkg.patch
#           cd $(dirname `which makepkg`)
#           git apply "$patch_path"

      - name: Prepare Build ${{ matrix.name }}
        run: |
          export SCRIPTS_DIR=`pwd`/scripts

          cat <<EOF > build.sh
          #!/bin/bash
          
          if [[ -n "${{ matrix.official }}" ]] ;  then
            rm -rf "svntogit-packages"
            git clone https://github.com/archlinux/svntogit-packages --single-branch --depth 1 --branch "packages/${{ matrix.name }}"
            cd svntogit-packages/trunk

            sudo pacman -Rcns --noconfirm --color always --ask 4 "${{ matrix.name }}"
          
          elif [[ -n "${{ matrix.local }}" ]] ; then
            rm -rf "${{ matrix.name }}"
            cp -a "./packages/${{ matrix.name }}" .
            cd "${{ matrix.name }}"
          
          else
            rm -rf "${{ matrix.name }}"
            git clone "https://aur.archlinux.org/${{ matrix.name }}.git"
            cd "${{ matrix.name }}"
          fi

          if [[ -n "${{ matrix.checkout }}" ]] ;  then
            git checkout "${{ matrix.checkout }}"
          fi
          
          find ../.. -ignore_readdir_race -type d -name .git -exec rm -rf {} \;
          
          if [[ -n "${{ matrix.apply_script_file }}" ]] ;  then
            echo "Applying Patch from ${{ matrix.apply_script_file }} file"
            
            chmod a+x "${SCRIPTS_DIR}/${{ matrix.apply_script_file }}"
            "${SCRIPTS_DIR}/${{ matrix.apply_script_file }}"
          fi

          if [[ -n "${{ matrix.apply_cmd }}" ]] ;  then
            echo "Applying Patch from command:"
            echo "${{ matrix.apply_cmd }}"
            
            ${{ matrix.apply_cmd }}
          fi
          
          bat --color always --pager=never PKGBUILD

          paru -Ui --noconfirm --color always --nocleanafter --pgpfetch --noredownload --ask 4 ${{ matrix.build_flags }}
          
          EOF
          
          chmod a+x build.sh
          bat --color always --pager=never build.sh

      - name: Build ${{ matrix.name }}
        uses: Wandalen/wretry.action@v1.0.25
        with:
          attempt_limit: 3
          attempt_delay: "10000" # 10 seconds
          command: sudo -E -u user ./build.sh


      - name: "Fix File Names [Replace : with - ]"
        run: find . -type f -name '*:*' -execdir bash -c 'mv "$1" "${1//:/-}"' bash {} \;

      - name: "Copy all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec cp {} . \;

      - run: ls -lRh
        if: always()

      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.name }}"
          path: "*.pkg.tar.zst"

  prepare_deploy:
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"
    permissions:
      contents: write # For creating releases

    steps:
      - uses: actions/checkout@v3
      
      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat

      - name: Pacman Config
        run: |
          sed -i 's/#Color/Color/g' /etc/pacman.conf
          sed -i 's/HoldPkg/#HoldPkg/g' /etc/pacman.conf
          sed -i 's/IgnorePkg/#IgnorePkg/g' /etc/pacman.conf
          bat --color always --pager=never /etc/pacman.conf

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel curl wget coreutils xterm git sudo yay asp bat socat colorgcc procps-ng p7zip sudo manjaro-tools-base manjaro-tools-pkg

      - name: Create non root user
        run: |
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      - name: Create Version Env
        run: |
            version=$(date --utc '+%Y%m%d-%H%M')
            echo "VERSION=${version}" >> $GITHUB_ENV

            echo "Version: ${version}"

      - name: Download All Packages
        uses: actions/download-artifact@v3
        with:
          path: "${{ env.REPO }}"

      - name: "Move all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec mv {} "./${REPO}" \;

      - name: "Delete Empty Directories"
        continue-on-error: true
        run: find . -ignore_readdir_race -type d -exec rmdir -v {} \;

      - name: Generate database files
        run: |
          cd "${REPO}"
          repo-add "${REPO}.db.tar.gz" *.pkg.tar.*

      - name: Generate Checksum for packages
        run: |
          cd "${REPO}"
          echo "## SHA256 Checksum" > /tmp/checksums.sha256
          echo "| SHA256 | Filename |" >> /tmp/checksums.sha256
          echo "| ------ | -------- |" >> /tmp/checksums.sha256
          for file in *; do
            echo "| `sha256sum $file | cut -f1 -d' '` | $file |" >> /tmp/checksums.sha256
          done
          cat /tmp/checksums.sha256

      - name: Release Packages Files
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          tag_name: "${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          body_path: "/tmp/checksums.sha256"
          files: |
            ./${{ env.REPO }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Install apindex
        run: |
          wget "https://github.com/libthinkpad/apindex/archive/refs/tags/2.2.zip"
          7z x 2.2.zip
          cd apindex-2.2
          
          # Patch file to allow custom title
          git apply ../scripts/apindex.patch

          cmake . -DCMAKE_INSTALL_PREFIX=/usr
          sudo make install
          
          cd ..
          rm -r apindex-2.2 2.2.zip

      - name: Generate index.html
        run: |
          cd "${REPO}"
          apindex . "AUR Repository v${VERSION}"

      - run: ls -lRh
        if: always()

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy_files
          path: "${{ env.REPO }}/*"


  deploy:
    runs-on: ubuntu-latest
    needs: [prepare_deploy]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: true

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v1
        
      - name: Download Deploy files
        uses: actions/download-artifact@v3
        with:
          name: deploy_files

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

      - name: Repo details
        run: |
          echo "=========================================================================="
          echo "[${REPO}]"
          echo "SigLevel = Never"
          echo "Server = ${{ steps.deployment.outputs.page_url }}"
          echo "=========================================================================="


  test:
    runs-on: ubuntu-latest
    needs: [deploy]
    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"
    
    steps:
      - uses: actions/checkout@v3

      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat

      - name: Pacman Config
        run: |
          sed -i 's/#Color/Color/g' /etc/pacman.conf
          sed -i 's/HoldPkg/#HoldPkg/g' /etc/pacman.conf
          sed -i 's/IgnorePkg/#IgnorePkg/g' /etc/pacman.conf
          bat --color always --pager=never /etc/pacman.conf

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel python-pip curl wget coreutils xterm git sudo yay asp bat socat colorgcc procps-ng p7zip sudo manjaro-tools-base manjaro-tools-pkg

      - name: Config Repo
        run: patch -Np1 -i ./scripts/pacman_repo.patch /etc/pacman.conf
      
      - name: Intall Packages
        run: |
          pip3 install json5 # Allows using C-style comments in json
          python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"

          cat packages_aur.json | jq .[].name -r > packages_aur.txt
          while read -r package; do
              echo "=================== Installing $package ==================="
              pacman -Sy --noconfirm --color always $package
              echo "==========================================================="
          done < packages_aur.txt

