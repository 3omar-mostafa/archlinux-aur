name: AUR

on:
  schedule:
    - cron: '0 0 * * 6' # Runs at 00:00 UTC on Sat.
  push:
  workflow_dispatch:

env:
  FORCE_COLOR : 'true' # Force colors in console output
  CLICOLOR: 1
  force_color_prompt: 'yes'
  color_prompt: 'yes'
  TERM: 'xterm'
  GCC_COLORS: 'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
  COLORTERM: 'truecolor'
  REPO: aur-repo


defaults:
  run:
    shell: bash

jobs:
  load_balancer:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Set Output packages
          id: set-packages
          run: |
            # Note: jq -c does not work well with `fromJson` as its outtput contains spaces
            #       Python json works well as it removes spaces
            pip3 install json5 # Allows using C-style comments in json
            python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"
            echo "::set-output name=matrix::$(cat packages_aur.json)"


        - name: View Packages
          run: cat packages_aur.json | jq --color-output

      outputs:
          matrix: ${{ steps.set-packages.outputs.matrix }}




  build:
    name: "Build ${{ matrix.name }}"
    needs: load_balancer
    runs-on: ubuntu-latest
    
    strategy:
        fail-fast: false
        matrix:
#           include: ${{ fromJson(needs.load_balancer.outputs.matrix) }}
          include:
            - name: "opensnitch"
              depends: "hicolor-icon-theme python-qt-material python-pyasn"

    container:
      image: "manjarolinux/base"
      options: "--privileged=true --tty=true"

    steps:
      - uses: actions/checkout@v3

      - name: Add colors to pacman
        run: |
          sed 's/#Color/Color/g' /etc/pacman.conf
          cat /etc/pacman.conf

      - name: Install basic dependencies
        run: pacman -Sy --color always --noconfirm --needed base-devel coreutils xterm git sudo yay # man-pages man-db procps-ng

      - name: Create non root user
        run: |
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            chown -R user ..

      - name: yay configuration
        run: |
          echo "Epoch Version label is not prefered and causes error while uploading because files contains ':'"
          
          yay --answerclean None --builddir $PWD --save
          yay --show --currentconfig

      - name: Prepare Install/Build Dependencies
        if: matrix.depends
        run: |
          cat <<EOF > deps.sh
          pacman -Sy --noconfirm --needed ${{ matrix.depends }} \
            || \
            sudo -u user yay -Sy --noconfirm --needed --builddir . --nocleanafter ${{ matrix.depends }} \
            || \
            ( echo "[Error] Can not install dependencies" && exit 1 )
          EOF
          
          cat deps.sh
          chmod a+x deps.sh
        
      - name: Install/Build Dependencies of ${{ matrix.name }}
        if: matrix.depends
        uses: Wandalen/wretry.action@v1.0.25
        with:
          attempt_limit: 3
          attempt_delay: "10000" # 10 seconds
          command: ./deps.sh
            

#       - name: Build ${{ matrix.name }}
#         uses: Wandalen/wretry.action@v1.0.25
#         with:
#           attempt_limit: 3
#           attempt_delay: "10000" # 10 seconds
#           command: sudo -u user yay -Sy --noconfirm --needed --builddir . --nocleanafter --aur ${{ matrix.name }}

      - name: Patch makepkg
        run: |
          cat <<EOF > patch.diff
          diff --git a/makepkg b/makepkg
          --- a/makepkg	(revision 0c496bc92953cd1bcd4f0a3373d21597c29621fe)
          +++ b/makepkg	(date 1659839852228)
          @@ -227,9 +227,14 @@
           run_pacman() {
            local cmd cmdescape
            if [[ $1 = -@(T|Q)*([[:alpha:]]) ]]; then
          -		cmd=("$PACMAN_PATH" "$@")
          +		cmd=("$PACMAN_PATH" -v "$@")
          +		echo "************************************************************"
          +		echo "${cmd[@]}"
          +		echo "Entered If Condition, params are: $@"
          +		echo "************************************************************"
          +
            else
          -		cmd=("$PACMAN_PATH" "${PACMAN_OPTS[@]}" "$@")
          +		cmd=("$PACMAN_PATH" -v "${PACMAN_OPTS[@]}" "$@")
              cmdescape="$(printf '%q ' "${cmd[@]}")"
              if (( ${#PACMAN_AUTH[@]} )); then
                if in_array '%c' "${PACMAN_AUTH[@]}"; then
          @@ -253,6 +258,7 @@
              done
            fi
            "${cmd[@]}"
          +	echo "${cmd[@]}"
           }

           check_deps() {

          EOF
           
          patch_path=$PWD/patch.diff
          cd $(dirname `which makepkg`)
          git apply "$patch_path"
           

      - name: Build ${{ matrix.name }}
        run: |
          cat <<EOF > build.sh
          #!/bin/bash
          env
          
          git clone "https://aur.archlinux.org/${{ matrix.name }}.git"
          cd "${{ matrix.name }}"
          makepkg --noconfirm --needed -si
          
          EOF
          
          chmod a+x build.sh
          chmod -R 777 /home
          chmod -R 777 $PWD
          
          export PACMAN=yay
          export BUILDDIR=$PWD
          
          sudo -E -u user ./build.sh
          #sudo -E -u user yay -Sy --noconfirm ${{ matrix.name }}

      - name: "Fix File Names [Replace : with - ]"
        run: find . -type f -name '*:*' -execdir bash -c 'mv "$1" "${1//:/-}"' bash {} \;

      - name: "Copy all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec cp {} . \;

      - run: ls -lRh
        if: always()

      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.name }}"
          path: "*.pkg.tar.zst"

#   prepare_deploy:
#     needs: [build]
#     runs-on: ubuntu-latest
#     container:
#       image: "manjarolinux/base"
#       options: "--privileged=true --tty=true"
#     permissions:
#       contents: write # For creating releases

#     steps:

#       - name: Add colors to pacman
#         run: |
#           sed 's/#Color/Color/g' /etc/pacman.conf
#           cat /etc/pacman.conf

#       - name: Install basic dependencies
#         run: pacman -Sy --noconfirm --needed base-devel coreutils xterm git wget p7zip sudo manjaro-tools-base manjaro-tools-pkg

#       - name: Create non root user
#         run: |
#             # Wheel group is the sudo group in Arch Linux
#             useradd --create-home --groups wheel  user
#             echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

#       - name: Create Version Env
#         run: |
#             version=$(date --utc '+%Y%m%d-%H%M')
#             echo "VERSION=${version}" >> $GITHUB_ENV

#             echo "Version: ${version}"

#       - name: Download All Packages
#         uses: actions/download-artifact@v3
#         with:
#           path: "${{ env.REPO }}"

#       - name: "Move all packages to root folder"
#         run: find . -iname *.pkg.tar.zst -exec mv {} "./${REPO}" \;

#       - name: "Delete Empty Directories"
#         continue-on-error: true
#         run: find . -type d -exec rmdir -v {} \;

#       - name: Generate database files
#         run: |
#           cd "${REPO}"
#           repo-add "${REPO}.db.tar.gz" *.pkg.tar.*

#       - name: Generate Checksum for packages
#         run: |
#           cd "${REPO}"
#           sha256sum * > checksums.sha256
#           cat checksums.sha256

#       - name: Release Packages Files
#         uses: softprops/action-gh-release@v1
#         if: always()
#         with:
#           tag_name: "${{ env.VERSION }}"
#           name: "Release v${{ env.VERSION }}"
#           body_path: "./${{ env.REPO }}/checksums.sha256"
#           files: |
#             ./${{ env.REPO }}/*
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
#       - name: Install apindex
#         run: |
#           wget "https://github.com/libthinkpad/apindex/archive/refs/tags/2.2.zip"
#           7z x 2.2.zip
#           cd apindex-2.2
          
#           # Patch file to allow custom title
#           echo -e "\n================ Patching ================\n"
#           sed -Ei 's/.*IndexWriter.writeIndex\(sys.argv\[1\]\)/    IndexWriter.writeIndex(sys.argv[1], sys.argv[2])/g' apindex.py
#           tail apindex.py
#           echo -e "\n\n=====================================================\n\n"
#           sed -i 's|<h1>Index of #DIR</h1>|<h1>#TITLE - Index of #DIR</h1>|g' share/apindex/index.template.html
#           tail share/apindex/index.template.html
          
#           cmake . -DCMAKE_INSTALL_PREFIX=/usr
#           sudo make install
          
#           cd ..
#           rm -r apindex-2.2 2.2.zip

#       - name: Generate index.html
#         run: |
#           cd "${REPO}"
#           apindex . "My AUR Repository v${VERSION}"

#       - run: ls -lRh
#         if: always()

#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: deploy_files
#           path: "${{ env.REPO }}/*"
# 
# 
#   deploy:
#     runs-on: ubuntu-latest
#     needs: [prepare_deploy]
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     permissions:
#       contents: read
#       pages: write
#       id-token: write
#     concurrency:
#       group: "pages"
#       cancel-in-progress: true

#     steps:
#       - name: Setup Pages
#         uses: actions/configure-pages@v1
        
#       - name: Download Deploy files
#         uses: actions/download-artifact@v3
#         with:
#           name: deploy_files

#       - name: Generate artifact
#         run: tar --dereference --hard-dereference --directory '.' -cvf artifact.tar --exclude=.git --exclude=.github .
      
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: github-pages
#           path: artifact.tar

# #     Due to a bug in actions/deploy-pages@main, it download the first artifact in alphabetical order, not `github-pages` as the docs
# #     When this is fixed, remove this code
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: '!!!!!!!!!github-pages'
#           path: artifact.tar

# #       - name: Upload artifact
# #         uses: actions/upload-pages-artifact@v1
# #         with:
# #           path: '.'
          
          
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@main

#       - name: Repo details
#         run: |
#           echo "=========================================================================="
#           echo "[${REPO}]"
#           echo "SigLevel = Never"
#           echo "Server = ${{ steps.deployment.outputs.page_url }}"
#           echo "=========================================================================="
