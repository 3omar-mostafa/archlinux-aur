name: AUR

# use `--ask 4` in pacman to allow default yes in case of conflicts
# https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions


on:
  schedule:
    - cron: '0 0 * * tue'
  workflow_dispatch:
  push:

env:
  BAT_PAGER: ''
  COLUMNS: '140' # Terminal Width
  FORCE_COLOR : '1' # Force colors in console output
  MYPY_FORCE_COLOR: '1'
  CLICOLOR: 1
  CLI_COLOR: 1
  CLICOLOR_FORCE: 'yes'
  CLI_COLOR_FORCE: 'yes'
  force_color_prompt: 'yes'
  color_prompt: 'yes'
  TERM: 'xterm-256color'
  COLORTERM: 'truecolor'
  COLOR_TERM: 'truecolor'
  REPO: aur-repo

permissions:
  contents: write # For creating releases
  pages: write
  id-token: write
  deployments: write

defaults:
  run:
    shell: bash -l -e -o pipefail {0}

jobs:
  load_balancer:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v4

        - name: Set Output packages
          id: set-packages
          run: |
            # Note: jq -c does not work well with `fromJson` as its outtput contains spaces
            #       Python json works well as it removes spaces
            pip3 install json5 # Allows using C-style comments in json
            
            cat <<EOF > packages.py
            import json5, json
            packages = json5.load(open('packages_aur.json', 'r'))
            
            env = ${{ toJSON(env) }}

            for package in packages:
              if 'env' not in package:
                package['env'] = env

            only_include_packages = ['extension-manager', 'fatcat', 'brave-bin', 'bulky']
            
            if only_include_packages:
              packages = [p for p in packages if p['name'] in only_include_packages]

            json.dump(packages, open('packages_aur.json', 'w'))

            EOF

            python3 packages.py

            # Due to github actions matrix limits
            # Split packages to multiple files, each containing max of 250 packages
            # Generates: packages_aur_00.json, packages_aur_01.json ...
            cat packages_aur.json | jq -c '_nwise(250)' | split -d -l 1 - packages_aur_ --additional-suffix=.json --suffix-length=3
            
            echo "matrix_1=$(cat packages_aur_000.json)" >> $GITHUB_OUTPUT
            echo "matrix_2=$(cat packages_aur_001.json)" >> $GITHUB_OUTPUT


        - name: View Packages
          run: cat packages_aur.json | jq --color-output


        - name: Create Version Env
          id: set-version
          run: |
              version=$(date --utc '+%Y%m%d-%H%M')
              echo "VERSION=${version}" >> $GITHUB_ENV
              echo "Version: ${version}"
              echo "version=${version}" >> $GITHUB_OUTPUT


      outputs:
          matrix_1: ${{ steps.set-packages.outputs.matrix_1 }}
          matrix_2: ${{ steps.set-packages.outputs.matrix_2 }}
          version: ${{ steps.set-version.outputs.version }}



  build:
    name: "${{ matrix.name }}"
    needs: load_balancer
    
    strategy:
        fail-fast: false
        matrix:
          include: ${{ fromJson(needs.load_balancer.outputs.matrix_1) }}
          # include:
            # - name: "peass"
            # - name: "pe-bear"
    uses: ./.github/workflows/build.yml
    with:
      apply_cmd: ${{ matrix.apply_cmd }}
      apply_script_file: ${{ matrix.apply_script_file }}
      archdepends: ${{ matrix.archdepends }}
      build_flags: ${{ matrix.build_flags }}
      checkdepends: ${{ matrix.checkdepends }}
      checkout: ${{ matrix.checkout }}
      conflictdepends: ${{ matrix.conflictdepends }}
      depends: ${{ matrix.depends }}
      disable_mold: ${{ matrix.disable_mold }}
      env: ${{ toJson(matrix.env) }}
      gpg_key: ${{ matrix.gpg_key }}
      gpg_key_server: ${{ matrix.gpg_key_server }}
      gpg_url: ${{ matrix.gpg_url }}
      group: ${{ matrix.group }}
      local: ${{ matrix.local }}
      meta: ${{ matrix.meta }}
      name: ${{ matrix.name }}
      need_swap: ${{ matrix.need_swap }}
      official: ${{ matrix.official }}
      postdepends: ${{ matrix.postdepends }}
      python2: ${{ matrix.python2 }}



  build_:
    name: "${{ matrix.name }}"
    needs: load_balancer
    
    strategy:
        fail-fast: false
        matrix:
          include: ${{ fromJson(needs.load_balancer.outputs.matrix_2) }}
          # include:
          #   - name: "yaru"
          #     group: "yaru"
    uses: ./.github/workflows/build.yml
    with:
      apply_cmd: ${{ matrix.apply_cmd }}
      apply_script_file: ${{ matrix.apply_script_file }}
      archdepends: ${{ matrix.archdepends }}
      build_flags: ${{ matrix.build_flags }}
      checkdepends: ${{ matrix.checkdepends }}
      checkout: ${{ matrix.checkout }}
      conflictdepends: ${{ matrix.conflictdepends }}
      depends: ${{ matrix.depends }}
      disable_mold: ${{ matrix.disable_mold }}
      env: ${{ toJson(matrix.env) }}
      gpg_key: ${{ matrix.gpg_key }}
      gpg_key_server: ${{ matrix.gpg_key_server }}
      gpg_url: ${{ matrix.gpg_url }}
      group: ${{ matrix.group }}
      local: ${{ matrix.local }}
      meta: ${{ matrix.meta }}
      name: ${{ matrix.name }}
      need_swap: ${{ matrix.need_swap }}
      official: ${{ matrix.official }}
      postdepends: ${{ matrix.postdepends }}
      python2: ${{ matrix.python2 }}



  deploy:
    needs: [load_balancer, build]
    runs-on: ubuntu-latest
    container:
      image: "archlinux/archlinux:multilib-devel"
      options: "--privileged=true --tty=true"
    steps:
      - uses: actions/checkout@v4
      
      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel curl wget tree zip github-cli p7zip python-lxml python-beautifulsoup4

      - name: Create Version Env
        run: |
            version=${{ needs.load_balancer.outputs.version }}
            echo "VERSION=${version}" >> $GITHUB_ENV

            echo "Version: ${version}"

      # - name: Download All Packages
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: "${{ env.REPO }}"

      - name: Generate Checksum for packages (Part 1)
        run: |
          echo "## SHA256 Checksum" > /tmp/checksums.sha256
          echo "<details><summary>Click to expand</summary>" >> /tmp/checksums.sha256
          echo -e "\n\n" >> /tmp/checksums.sha256
          echo "| SHA256 | Filename |" >> /tmp/checksums.sha256
          echo "| ------ | -------- |" >> /tmp/checksums.sha256
        
      - name: Download All Packages
        shell: bash -l {0}
        run: |
          echo ${{ github.token }} | gh auth login --with-token
          tag_name="${{ env.VERSION }}"
          gh release create "$tag_name" --title "Release v$tag_name" --repo ${{ github.repository }}

          for p in {a..z}; do
            
            echo "Downloading Packages"
            gh run download ${{ github.run_id }} --repo ${{ github.repository }} --pattern ${p}'*' --dir "./${REPO}"
            status_code=$?
            if [[ $status_code -ne 0 ]] ; then
              echo -e "No packages starting with ' ${p}'"
              continue
            fi

            echo "List Downloaded Packages"
            tree "./${REPO}" --du -h

            echo "Move all packages to root folder"
            find . -iname '*.pkg.tar.zst' -exec mv -v {} "./${REPO}" \;

            echo "Delete Empty Directories"
            find . -ignore_readdir_race -type d -exec rmdir -v {} \; || true

            echo "Delete Python 2 Packages"
            find . -iname 'python2*' -exec rm -rfv {} \; || true


            cd "${REPO}"


            echo "Generate database files"
            repo-add "${REPO}.db.tar.gz" *.pkg.tar.*

            echo "Generate Checksum for packages (Part 2)"
            for file in *.pkg.tar.*; do
              echo "| `sha256sum $file | cut -f1 -d' '` | $file |" >> /tmp/checksums.sha256
            done

            echo "Upload Release files"
            for package in *.pkg.tar.* ; do
              for attempt in {1..15} ; do
                if [[ "$attempt" -ne 1 ]] ; then
                  echo -e "\e[1m\e[33m Attempt#$attempt Trying to upload '$package' \e[0m"
                fi

                gh release upload "$tag_name" --repo "${{ github.repository }}" --clobber "$package"
                status_code=$?

                remaining_api=$(gh api /rate_limit --jq '.resources.core.remaining')

                if [[ $status_code -eq 0 ]] ; then
                  echo -e "\e[1m\e[32m Uploaded '$package' \e[0m \e[1m\e[33m [Remaining API $remaining_api] \e[0m"
                  break
                else
                  echo -e "\e[1m\e[31m Failed to upload '$package' \e[0m \e[1m\e[33m [Remaining API $remaining_api] \e[0m"
                  if [[ "$attempt" -eq 10 || "$remaining_api" -le 1 ]] ; then
                    reset_time=$(gh api /rate_limit --jq '.resources.core.reset')
                    current_time=$(date --utc '+%s')
                    echo " [DEBUG] reset_time: $reset_time"
                    echo " [DEBUG] current_time: $current_time"
                    time_to_reset=$(( $reset_time - $current_time ))

                    echo " [DEBUG] Will sleep until ratelimit reset, i.e. ${time_to_reset} sec. ($(( $time_to_reset / 60 )) min.)"
                    sleep $time_to_reset
                  fi

                  if [[ "$attempt" -eq 10 ]] ; then
                    echo -e "\e[1m\e[31m ============== Failed to Release '$package' ============== \e[0m"
                  fi
                fi
                
                sleep $(( 2 * $attempt ))
              done
              sleep 1
            done

            echo "Deleting packages"
            rm -rvf *.pkg.tar.*

            cd ..
            
          done

      - name: Generate Checksum for packages (Part 3)
        run: |
          echo -e "\n\n</details>" >> /tmp/checksums.sha256
          cat /tmp/checksums.sha256
          gh release edit "$tag_name" --repo ${{ github.repository }} --notes-file /tmp/checksums.sha256

      - name: Generate index.html
        run: |
          pacman -Sy --noconfirm --color always --needed cmake make
          export SCRIPTS_DIR="$PWD/scripts/apindex"
          $SCRIPTS_DIR/build.sh
          cd "${REPO}"
          apindex . "AUR Repository v${VERSION}"

      - name: Add deploy redirects
        run: |
          cd "${REPO}" && mkdir deploy && cd deploy
          cp -v ../index.html .
          echo "/:file https://github.com/3omar-mostafa/archlinux-aur/releases/download/${VERSION}/:file 301" > _redirects

      # There was an issue while deploying non writable files
      - run: chmod -R a+rw .

      - name: Prepare Cloudflare deploy
        run: |
          pacman -Sy --noconfirm --color always --needed nodejs-lts-hydrogen npm
          npm install -g wrangler@2

      - name: Publish to Cloudflare Pages
        id: cloudflare-pages-deploy
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "${{ env.REPO }}"
          directory: "${{ env.REPO }}/deploy"
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Repo details
        run: |
          echo "=========================================================================="
          echo "[${REPO}]"
          echo "SigLevel = Never"
          echo "Server = ${{ steps.cloudflare-pages-deploy.outputs.url }}"
          echo "=========================================================================="

    outputs:
      deploy_url: ${{ steps.cloudflare-pages-deploy.outputs.url }}

  test:
    runs-on: ubuntu-latest
    needs: [deploy]
    container:
      image: "archlinux/archlinux:multilib-devel"
      options: "--privileged=true --tty=true"
    
    steps:
      - uses: actions/checkout@v4

      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel python-json5

      - name: Config Repo
        run: |
          sed -i "s^{{PM_REPO_PATCH_URL}}^${{ needs.deploy.outputs.deploy_url }}^g" ./scripts/pacman_repo.patch
          patch -Np1 -i ./scripts/pacman_repo.patch /etc/pacman.conf
          pacman -Syy --noconfirm --color always
      
      - name: Intall Packages
        shell: bash -l {0}
        run: |
          python3 ./scripts/prepare_test_packages.py

          while read -r package; do
              echo -e "\e[1m\e[32m =================================== Installing '$package' =================================== \e[0m"
              pacman -S --noconfirm --color always --ask 4 --overwrite '*' $package 

              if [[ $? != 0 ]] ; then
                echo -e "\e[1m\e[31m ============================== Failed to install '$package' ============================== \e[0m"
                echo "$package" >> failed_to_install.txt
              else
                pacman -R --color always --noconfirm --ask 4 "$package" >/dev/null
                paccache -r -k 0 -q # clean pacman cache to free space
              fi

              echo -e "\e[1m\e[33m =========================================================================================== \e[0m"
          done < packages_aur.txt


      - name: List packages failed to install
        run: cat failed_to_install.txt || echo "All packages installed successfully"

