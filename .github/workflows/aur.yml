name: AUR

# use `--ask 4` in pacman to allow defeault yes in case of conflicts
# https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions


on:
  schedule:
    - cron: '0 0 * * sun'
  workflow_dispatch:

env:
  FORCE_COLOR : 'true' # Force colors in console output
  CLICOLOR: 1
  CLI_COLOR: 1
  CLICOLOR_FORCE: 'yes'
  CLI_COLOR_FORCE: 'yes'
  force_color_prompt: 'yes'
  color_prompt: 'yes'
  TERM: 'xterm-256color'
  GCC_COLORS: 'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
  LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
  COLORTERM: 'truecolor'
  COLOR_TERM: 'truecolor'
  VERBOSE: 1
  NODE_OPTIONS: '--max_old_space_size=8192' # increase max allowed memory usage
  REPO: aur-repo

permissions:
  contents: write # For creating releases
  pages: write
  id-token: write

defaults:
  run:
    shell: bash -l -e -o pipefail {0}

jobs:
  load_balancer:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Set Output packages
          id: set-packages
          run: |
            # Note: jq -c does not work well with `fromJson` as its outtput contains spaces
            #       Python json works well as it removes spaces
            pip3 install json5 # Allows using C-style comments in json
            python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"
            echo "::set-output name=matrix::$(cat packages_aur.json)"


        - name: View Packages
          run: cat packages_aur.json | jq --color-output

      outputs:
          matrix: ${{ steps.set-packages.outputs.matrix }}




  build:
    name: "Build ${{ matrix.name }}"
    needs: load_balancer
    runs-on: ubuntu-latest
    
    strategy:
        fail-fast: false
        matrix:
          # include: ${{ fromJson(needs.load_balancer.outputs.matrix) }}
          include:
            - name: "7-zip"

    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"

    steps:
      - uses: actions/checkout@v3
  
      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat aria2

      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: makepkg Config
        run: |
          sed -i 's/COMPRESSZST.*/COMPRESSZST=(zstd -c -z -q --threads=0 -19 -)/g' /etc/makepkg.conf
          echo 'PACKAGER="3omar-mostafa <3omar-mostafa@invalid-email.com>"' >> /etc/makepkg.conf
          bat --color always --pager=never /etc/makepkg.conf

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel glibc curl wget coreutils asp xterm git sudo yay bat procps-ng python socat

      - name: Test tty
        run: |
          cat <<EOF > deps.sh
            python -c 'import sys; print(sys.stdout.isatty())'
          EOF
          chmod a+x deps.sh

          echo -n "Normal Running Script: "
          ./deps.sh

          echo -n "Socat Running Script: "
          socat EXEC:'./deps.sh',pty STDIO

      - name: Create Swap file
        if: matrix.need_swap
        run: |
          export SWAPFILE=/__w/swapfile
          dd if=/dev/zero of=$SWAPFILE bs=1M count=10240 status=progress
          chmod 0600 $SWAPFILE
          mkswap -U clear $SWAPFILE
          swapon --verbose $SWAPFILE
          
          swapon --show 
          df -Th
          free -h

      - name: Create non root user
        run: |
            cp -v /etc/skel/.* ~ || true
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            chown -R user ..

      - name: yay configuration
        run: |
          echo "Epoch Version label is not prefered and causes error while uploading because files contains ':'"
          
          yay --answerclean None --builddir $PWD --save
          yay --show --currentconfig

      - name: Install Paru
        run: sudo -E -u user yay -Sy --color always --noconfirm --cleanafter paru-bin

      - name: Install GPG Key
        if: matrix.gpg_key
        run: |
          sudo -E -u user gpg --recv-keys ${{ matrix.gpg_key }}
          gpg --recv-keys ${{ matrix.gpg_key }}

      - name: Install GPG Key
        if: matrix.gpg_url
        run: |
          wget "${{ matrix.gpg_url }}" -O /tmp/gpg.key && chmod a+r /tmp/gpg.key
          
          sudo -E -u user gpg --import /tmp/gpg.key
          gpg --import /tmp/gpg.key

      - name: Install/Build Dependencies of ${{ matrix.name }}
        if: matrix.depends || matrix.checkdepends
        run: |
          cat <<EOF > deps.sh
            sudo -E -u user yay -Sy --color always --noconfirm --needed --builddir . --nocleanafter --ask 4 ${{ matrix.depends }} ${{ matrix.checkdepends }}
          EOF
          
          chmod a+x deps.sh
          bat --color always --pager=never deps.sh
          socat EXEC:'bash -l -e -o pipefail ./deps.sh',pty STDIO

      - name: Build ${{ matrix.name }}
        if: ${{ ! matrix.meta }}
        run: |
          export SCRIPTS_DIR=`pwd`/scripts

          cat <<EOF > build.sh
          #!/bin/bash
          
          if [[ -n "${{ matrix.official }}" ]] ;  then
            git clone https://github.com/archlinux/svntogit-packages --single-branch --depth 1 --branch "packages/${{ matrix.name }}"
            cd svntogit-packages/trunk

            sudo -E pacman -Rcns --noconfirm --color always --ask 4 "${{ matrix.name }}" || true
          
          elif [[ -n "${{ matrix.local }}" ]] ; then
            cp -a "./packages/${{ matrix.name }}" .
            cd "${{ matrix.name }}"
          
          else
            git clone "https://aur.archlinux.org/${{ matrix.name }}.git"
            cd "${{ matrix.name }}"
          fi

          if [[ -n "${{ matrix.checkout }}" ]] ;  then
            git checkout "${{ matrix.checkout }}"
          fi
          
          find ../.. -ignore_readdir_race -type d -name .git -exec rm -rf {} \; || true
          
          if [[ -n "${{ matrix.apply_script_file }}" ]] ;  then
            echo "Applying Patch from ${{ matrix.apply_script_file }} file"
            
            chmod a+x "${SCRIPTS_DIR}/${{ matrix.apply_script_file }}"
            "${SCRIPTS_DIR}/${{ matrix.apply_script_file }}"
          fi

          if [[ -n "${{ matrix.apply_cmd }}" ]] ;  then
            echo "Applying Patch from command:"
            echo "${{ matrix.apply_cmd }}"
            
            ${{ matrix.apply_cmd }}
          fi
          
          bat --color always --pager=never PKGBUILD

          paru -Ui --noconfirm --color always --nocleanafter --pgpfetch --noredownload --ask 4 --builddir . ${{ matrix.build_flags }}
          
          EOF
          
          chown -R user:user /github
          chown -R user:user $HOME

          chmod a+x build.sh
          bat --color always --pager=never build.sh
          socat EXEC:'sudo -E -u user bash -l -e -o pipefail ./build.sh',pty STDIO

      - name: Conflict Dependencies of ${{ matrix.name }}
        if: matrix.conflictdepends
        run: |
          cat <<EOF > deps.sh
            function RED()    { echo -e "\e[1m\e[31m\${1}\e[0m"; }
            function GREEN()  { echo -e "\e[1m\e[32m\${1}\e[0m"; }
            function YELLOW() { echo -e "\e[1m\e[33m\${1}\e[0m"; }

            read -a packages <<< "${{ matrix.conflictdepends }}"
            for package in "\${packages[@]}"; do
              YELLOW "################################################################################"
              if [[ -n "\$old_package" ]]; then
                RED "****************************** Removing \$old_package ******************************"
                pacman -R --color always --noconfirm --ask 4 "\$old_package"
                RED "********************************************************************************"
              fi
              GREEN "==================================== Installing \$package ===================================="
              sudo -E -u user yay -Sy --color always --noconfirm --needed --builddir . --nocleanafter --ask 4 --overwrite '*' "\$package"
              export old_package="\$package"
              GREEN "================================================================================"
            done
          EOF
          
          chmod a+x deps.sh
          bat --color always --pager=never deps.sh
          socat EXEC:'bash -l -e -o pipefail ./deps.sh',pty STDIO

      - name: Post Dependencies of ${{ matrix.name }}
        if: matrix.postdepends
        run: |
          cat <<EOF > deps.sh
            sudo -E -u user yay -Sy --color always --noconfirm --needed --builddir . --nocleanafter --ask 4 ${{ matrix.postdepends }}
          EOF
          
          chmod a+x deps.sh
          bat --color always --pager=never deps.sh
          socat EXEC:'bash -l -e -o pipefail ./deps.sh',pty STDIO

      - name: "Fix File Names [Replace : with - ]"
        run: find . -type f -name '*:*' -execdir bash -c 'mv "$1" "${1//:/-}"' bash {} \;

      - name: "Copy all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec cp {} . \;

      - run: ls -lRh --color=always
        if: always()

      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.name }}"
          path: "*.pkg.tar.zst"

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: true      
    steps:
      - uses: actions/checkout@v3
      
      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat aria2

      - name: Pacman Config
        run: ./scripts/pacmanconf.sh

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel curl wget tree zip github-cli asp p7zip manjaro-tools-base manjaro-tools-pkg

      - name: Create Version Env
        run: |
            version=$(date --utc '+%Y%m%d-%H%M')
            echo "VERSION=${version}" >> $GITHUB_ENV

            echo "Version: ${version}"

      - name: Download All Packages
        uses: actions/download-artifact@v3
        with:
          path: "${{ env.REPO }}"

      - name: "List packages tree"
        run: tree "./${REPO}"

      - name: "Move all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec mv -v {} "./${REPO}" \;

      - name: "Delete Empty Directories"
        continue-on-error: true
        run: find . -ignore_readdir_race -type d -exec rmdir -v {} \; || true

      - name: Generate database files
        run: |
          cd "${REPO}"
          repo-add "${REPO}.db.tar.gz" *.pkg.tar.*

      - name: Generate Checksum for packages
        run: |
          cd "${REPO}"
          echo "## SHA256 Checksum" > /tmp/checksums.sha256
          echo "| SHA256 | Filename |" >> /tmp/checksums.sha256
          echo "| ------ | -------- |" >> /tmp/checksums.sha256
          for file in *; do
            echo "| `sha256sum $file | cut -f1 -d' '` | $file |" >> /tmp/checksums.sha256
          done
          cat /tmp/checksums.sha256

      - name: Release Packages Files
        run: |
          echo ${{ github.token }} | gh auth login --with-token
          tag_name="${{ env.VERSION }}"

          gh release create "$tag_name" --title "Release v${{ env.VERSION }}" --repo ${{ github.repository }} --notes-file /tmp/checksums.sha256 || echo "release already exists"
          gh release upload "$tag_name" --repo ${{ github.repository }} --clobber ./${{ env.REPO }}/*

      - name: Generate index.html
        run: |
          $PWD/scripts/apindex/build.sh
          cd "${REPO}"
          apindex . "AUR Repository v${VERSION}"

      - run: ls -lRh --color=always
        if: always()

      - run: du -sh ${{ env.REPO }}/* | sort -rh
        continue-on-error: true
        if: always()

      - name: Prepare pages artifact
        run: tar --dereference --hard-dereference --directory "${{ env.REPO }}" -cvf artifact.tar --exclude=.git --exclude=.github .
      
      - name: Upload pages artifact
        uses: actions/upload-artifact@v3
        with:
          name: github-pages
          path: artifact.tar
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        with:
          timeout: '7200000' # 2 hours
          error_count: '50'
          reporting_interval: '30000' # 30 seconds

      - name: Repo details
        run: |
          echo "=========================================================================="
          echo "[${REPO}]"
          echo "SigLevel = Never"
          echo "Server = ${{ steps.deployment.outputs.page_url }}"
          echo "=========================================================================="


  test:
    runs-on: ubuntu-latest
    needs: [deploy]
    container:
      image: "manjarolinux/build"
      options: "--privileged=true --tty=true"
    
    steps:
      - uses: actions/checkout@v3

      - name: Install bat
        run: pacman -Sy --noconfirm --color always --needed bat aria2

      - name: Pacman Config
        run: |
          ./scripts/pacmanconf.sh

      - name: Install basic dependencies
        run: |
          pacman -Syu --noconfirm --color always
          pacman -Sy --noconfirm --color always --needed base-devel python-json5 asp

      - name: Config Repo
        run: patch -Np1 -i ./scripts/pacman_repo.patch /etc/pacman.conf
      
      - name: Intall Packages
        run: |
          python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"

          cat packages_aur.json | jq .[].name -r > packages_aur.txt
          while read -r package; do
              echo "=================== Installing $package ==================="
              pacman -Sy --noconfirm --color always --ask 4 $package 
              echo "==========================================================="
          done < packages_aur.txt

