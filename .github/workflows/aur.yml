name: AUR

on:
  schedule:
    - cron: '0 0 * * 6' # Runs at 00:00 UTC on Sat.
  push:
  workflow_dispatch:

env:
  FORCE_COLOR : 'true' # Force colors in console output
  CLICOLOR: 1
  force_color_prompt: 'yes'
  color_prompt: 'yes'
  TERM: 'xterm'
  GCC_COLORS: 'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
  COLORTERM: 'truecolor'
  REPO: my-aur-repo


defaults:
  run:
    shell: bash

jobs:
  load_balancer:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Set Output packages
          id: set-packages
          run: |
            # Note: jq -c does not work well with `fromJson` as its outtput contains spaces
            #       Python json works well as it removes spaces
            pip3 install json5 # Allows using C-style comments in json
            python3 -c "import json5, json; json.dump(json5.load(open('packages_aur.json', 'r')), open('packages_aur.json', 'w'))"
            echo "::set-output name=matrix::$(cat packages_aur.json)"


        - name: View Packages
          run: cat packages_aur.json | jq --color-output

      outputs:
          matrix: ${{ steps.set-packages.outputs.matrix }}




  build:
    name: "Build ${{ matrix.name }}"
    needs: load_balancer
    runs-on: ubuntu-latest
    
    strategy:
        fail-fast: false
        matrix:
#           include: ${{ fromJson(needs.load_balancer.outputs.matrix) }}
          include:
            - name: "android-apktool"
              depends: ""

    container:
      image: "manjarolinux/base"
      options: "--privileged=true --tty=true"

    steps:
      - uses: actions/checkout@v3

      - name: Add colors to pacman
        run: |
          sed 's/#Color/Color/g' /etc/pacman.conf
          cat /etc/pacman.conf

      - name: Install basic dependencies
        run: pacman -Sy --noconfirm --needed base-devel coreutils xterm git sudo yay # man-pages man-db procps-ng

      - name: Create non root user
        run: |
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

#       - name: yay configuration to disable epoch versions
#         run: |
#           echo "Epoch Version label is not prefered and causes error while uploading because files contains ':'"
          
#           yay --editmenu --answeredit All --editor sed --editorflags "'s/epoch=/#epoch=/g'" --save
#           yay --show --currentconfig

      - name: Install/Build Dependencies of ${{ matrix.name }}
        run: |
          pacman -Sy --noconfirm --needed ${{ matrix.depends }} \
          || \
          sudo -u user yay -Sy --noconfirm --needed --builddir . --nocleanafter ${{ matrix.depends }} \
          || \
          ( echo "[Error] Can not install dependencies" && exit 1 )

      - name: Build ${{ matrix.name }}
        run: sudo -u user yay -Sy --noconfirm --needed --builddir . --nocleanafter --aur ${{ matrix.name }}

  #     - name: Build
  #       run: |
  #         package=blueprint-compiler-git
  #         sudo -u user git clone https://aur.archlinux.org/$package.git
  #         cd $package
  #         sudo -u user makepkg --noconfirm -si
  #         mv *.pkg.tar.zst ..

      - name: "Fix File Names [Replace : with - ]"
        run: find . -type f -name '*:*' -execdir bash -c 'mv "$1" "${1//:/-}"' bash {} \;

      - name: "Copy all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec cp {} . \;

      - run: ls -lRh
        if: always()

      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.name }}"
          path: "*.pkg.tar.zst"

  prepare_deploy:
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: "manjarolinux/base"
      options: "--privileged=true --tty=true"
    permissions:
      contents: write # For creating releases

    steps:

      - name: Add colors to pacman
        run: |
          sed 's/#Color/Color/g' /etc/pacman.conf
          cat /etc/pacman.conf

      - name: Install basic dependencies
        run: pacman -Sy --noconfirm --needed base-devel coreutils xterm git wget p7zip sudo manjaro-tools-base manjaro-tools-pkg

      - name: Create non root user
        run: |
            # Wheel group is the sudo group in Arch Linux
            useradd --create-home --groups wheel  user
            echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      - name: Create Version Env
        run: |
            version=$(date --utc '+%Y%H%M%S')
            echo "VERSION=${version}" >> $GITHUB_ENV

            echo "Version: ${version}"

      - name: Download All Packages
        uses: actions/download-artifact@v3
        with:
          path: "${{ env.REPO }}"

      - name: "Move all packages to root folder"
        run: find . -iname *.pkg.tar.zst -exec mv {} "./${REPO}" \;

      - name: "Delete Empty Directories"
        continue-on-error: true
        run: find . -type d -exec rmdir -v {} \;

      - name: Generate database files
        run: |
          cd "${REPO}"
          repo-add "${REPO}.db.tar.gz" *.pkg.tar.*

      - name: Generate Checksum for packages
        run: |
          cd "${REPO}"
          sha256sum * > checksums.sha256
          cat checksums.sha256

      - name: Release Packages Files
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          tag_name: "${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          body: "./${REPO}/checksums.sha256"
          files: |
            ./${REPO}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Install apindex
        run: |
          wget "https://github.com/libthinkpad/apindex/archive/refs/tags/2.2.zip"
          7z x 2.2.zip
          cd apindex-2.2
          
          # Patch file to allow custom title
          sed -i 's/IndexWriter.writeIndex(sys.argv[1])/IndexWriter.writeIndex(sys.argv[1], sys.argv[2])/g' apindex.py
          tail apindex.py
          
          cmake . -DCMAKE_INSTALL_PREFIX=/usr
          sudo make install
          
          cd ..
          rm -r apindex-2.2 2.2.zip

      - name: Generate index.html
        run: |
          cd "${REPO}"
          apindex . "My AUR Repository v${VERSION}"

      - run: ls -lRh
        if: always()

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy_files
          path: "${{ env.REPO }}/*"


  deploy:
    runs-on: ubuntu-latest
    needs: [prepare_deploy]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: true

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v1
        
      - name: Download Deploy files
        uses: actions/download-artifact@v3
        with:
          name: deploy_files

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main

      - name: Repo details
        run: |
          echo "=========================================================================="
          echo "[${REPO}]"
          echo "SigLevel = Never"
          echo "Server = ${{ steps.deployment.outputs.page_url }}"
          echo "=========================================================================="
